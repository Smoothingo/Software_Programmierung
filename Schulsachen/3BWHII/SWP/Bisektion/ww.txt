def regula_falsi(self, lower: float, upper: float, eps: float = DEFAULT_EPS) -> float:
        """Regula-Falsi-Verfahren"""
        if lower > upper: lower, upper = upper, lower
        f = self._build_function()
        self._validate_interval(f, lower, upper)
        self._reset_history()

        for _ in range(MAX_ITER):
            f_lower, f_upper = f(lower), f(upper)
            mid = upper - f_upper*(upper - lower)/(f_upper - f_lower)
            f_mid = f(mid)
            self._update_history(lower, upper, mid, f_mid)
            if abs(f_mid) < eps: return mid
            lower, upper = (lower, mid) if f(lower)*f_mid < 0 else (mid, upper)
        return mid

    def _validate_interval(self, f: Callable, a: float, b: float):
        """Prüft Vorzeichenwechsel"""
        fa, fb = f(a), f(b)
        print(f"Funktionswerte: f({a:.1f}) = {fa:.2e}, f({b:.1f}) = {fb:.2e}")
        if fa * fb >= 0:
            raise ValueError("Kein Vorzeichenwechsel im Intervall")

    def _update_history(self, a: float, b: float, c: float, fc: float):
        """Speichert Iterationsdaten"""
        self.history.append((a, b, c))
        self.errors.append(abs(fc))

    def _reset_history(self):
        """Setzt Verlauf zurück"""
        self.history.clear()
        self.errors.clear()


# ================= VISUALISIERUNG ================
class SolutionVisualizer:
    """Visualisierung des Lösungsprozesses mit 3 Plots"""
    
    def __init__(self, solver: EquationSolver):
        self.solver = solver
        self.fig, self.axes = plt.subplots(3, 1, figsize=(10, 12))
        self._setup_plots()

    def _setup_plots(self):
        """Initialisiert die Diagramme"""
        titles = ['Funktionsverlauf', 'Fehlerkonvergenz', 'Lösungsannäherung']
        for ax, title in zip(self.axes, titles):
            ax.clear()
            ax.set_title(title)
            ax.grid(True)
        self.axes[1].set_yscale('log')
        plt.tight_layout()

    def animate(self):
        """Animiert den Lösungsprozess"""
        x_vals = np.linspace(
            min(h[0] for h in self.solver.history),
            max(h[1] for h in self.solver.history),
            400
        )
        f = self.solver._build_function()
        
        # Initialer Plot
        self.axes[0].plot(x_vals, [f(x) for x in x_vals], 'b-')
        self.axes[0].axhline(0, color='grey', linestyle='--')

        def update(frame):
            a, b, c = self.solver.history[frame]
            
            # Aktualisiere Plots
            self.axes[0].scatter([a, b, c], [0, 0, 0], c=['red', 'blue', 'green'], s=50)
            self.axes[1].plot(self.solver.errors[:frame+1], 'r-')
            solutions = [h[2] for h in self.solver.history[:frame+1]]
            self.axes[2].plot(solutions, 'g-', marker='o', markersize=4)
            return self.axes

        ani = FuncAnimation(self.fig, update, frames=len(self.solver.history), interval=500)
        plt.show()
        return ani